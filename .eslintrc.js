/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/

module.exports = {
  env: {
    browser: true,
    node: true,
  },
  extends: [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "prettier",
    // "plugin:prettier/recommended",
    // "prettier/@typescript-eslint",
    "plugin:react-hooks/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
      useJSXTextNode: true,
    },
    ecmaVersion: 2018,
    sourceType: "module",
    project: ["./tsconfig.json", "craco.config.js"],
  },
  plugins: ["prettier", "@typescript-eslint", "react", "react-hooks"],
  env: {
    browser: true,
    es6: true,
    jest: true,
  },
  globals: {
    Atomics: "readonly",
    SharedArrayBuffer: "readonly",
  },
  settings: {
    react: {
      version: "detect",
    },
  },
  rules: {
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "off",
    "linebreak-style": "off",
    "prettier/prettier": "error",
    /**
     * ADSS overrides
     */
    // no-underscore-dangle: ["error", { "allow": ["foo_", "_bar"] }],
    "no-underscore-dangle": ["off", { allow: ["__html"] }],
    camelcase: [1, { properties: "always" }],
    "react/jsx-uses-vars": 1,
    "react/react-in-jsx-scope": 1,
    "react/display-name": 0,
    "react/no-unescaped-entities": 0,
    "@typescript-eslint/ban-ts-comment": 0,
    "@typescript-eslint/prefer-regexp-exec": 0,
    "@typescript-eslint/no-empty-function": 0,
    "@typescript-eslint/prefer-for-of": 0,
    "@typescript-eslint/no-unused-vars": [
      1,
      {
        varsIgnorePattern: "^(React|_)",
        argsIgnorePattern: "^_",
        ignoreRestSiblings: true,
      },
    ],
    "@typescript-eslint/no-unsafe-member-access": 0,
    "@typescript-eslint/no-unsafe-call": 0,
    "@typescript-eslint/no-unsafe-assignment": 0,
    "@typescript-eslint/explicit-module-boundary-types": 0,
    "@typescript-eslint/explicit-member-accessibility": [
      "warn",
      {
        accessibility: "explicit",
        overrides: {
          constructors: "off",
        },
      },
    ],
    "@typescript-eslint/no-inferrable-types": 0,
    "@typescript-eslint/restrict-template-expressions": 0,
    "@typescript-eslint/class-name-casing": 0,
    "@typescript-eslint/no-var-requires": 0,
    "@typescript-eslint/restrict-plus-operands": 0,
    "@typescript-eslint/no-unsafe-return": 0,
    "@typescript-eslint/array-type": 0,
    "eol-last": 2,
    "no-multiple-empty-lines": ["error", { max: 1, maxEOF: 1 }],
    "@typescript-eslint/no-explicit-any": 0,
    "@typescript-eslint/no-namespace": 0,
    "no-prototype-builtins": 0,
    "@typescript-eslint/no-empty-interface": [
      "error",
      { allowSingleExtends: true },
    ],

    // require the use of === and !==
    eqeqeq: ["warn", "always", { null: "ignore" }],
    // disallow else after a return in an if
    "no-else-return": ["warn", { allowElseIf: false }],
    // enforce that class methods use "this"
    "class-methods-use-this": [
      "warn",
      {
        exceptMethods: [],
      },
    ],
    // disallow redundant return keywords
    "no-useless-return": "warn",
    // require let or const instead of var
    "no-var": "warn",
    // require method and property shorthand syntax for object literals
    "object-shorthand": [
      "warn",
      "always",
      {
        ignoreConstructors: false,
        avoidQuotes: true,
      },
    ],
    // suggest using arrow functions as callbacks
    "prefer-arrow-callback": [
      "warn",
      {
        allowNamedFunctions: false,
        allowUnboundThis: true,
      },
    ],
    // suggest using const declaration for vars never modified after declared
    "prefer-const": [
      "error",
      {
        destructuring: "any",
        ignoreReadBeforeAssign: true,
      },
    ],
    // Prefer destructuring from arrays and objects
    "prefer-destructuring": [
      "error",
      {
        VariableDeclarator: {
          array: false,
          object: true,
        },
        AssignmentExpression: {
          array: true,
          object: true,
        },
      },
      {
        enforceForRenamedProperties: false,
      },
    ],
    // suggest using template literals instead of string concatenation
    "prefer-template": "warn",
    // disallow reassignment of function parameters
    "no-param-reassign": ["warn", { props: false }],
    /**
     * ========================================================================
     * ESLint Plugin TypeScript rules extending @typescript-eslint/recommended
     * ========================================================================
     */
    // disallow unused variables
    "@typescript-eslint/no-unused-vars": "off", // "warn" for production
    // disallow usage of the any type
    "@typescript-eslint/no-explicit-any": "off", // "warn" for production
    // disallows magic numbers
    "@typescript-eslint/no-magic-numbers": [
      "off",
      {
        ignoreArrayIndexes: true,
        ignore: [0, 1],
      },
    ], // "warn" for production
    // disallow the use of parameter properties in class constructors
    "@typescript-eslint/no-parameter-properties": "off",
    // warns if a type assertion does not change the type of an expression
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    // Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter
    "@typescript-eslint/unified-signatures": "warn",
    // requires Promise-like values to be handled appropriately
    "@typescript-eslint/no-floating-promises": "warn",
    // requires any function or method that returns a Promise to be marked async
    "@typescript-eslint/promise-function-async": "warn",
    // disallow async functions which have no await expression
    "@typescript-eslint/require-await": "warn",
    // avoid using promises in places not designed to handle them
    "@typescript-eslint/no-misused-promises": "warn",
    // require explicit return types on functions and class methods
    "@typescript-eslint/explicit-function-return-type": [
      "warn",
      {
        allowExpressions: true,
      },
    ],
    "require-await": "off",
    "@typescript-eslint/require-await": 0,
    "@typescript-eslint/member-ordering": [
      "warn",
      {
        default: [
          // Index signature
          "signature",

          // Fields
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "public-abstract-field",
          "protected-abstract-field",
          "private-abstract-field",

          // Constructors
          "public-constructor",
          "protected-constructor",
          "private-constructor",

          // Methods
          "public-static-method",
          "protected-static-method",
          "private-static-method",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method",
          "public-abstract-method",
          "protected-abstract-method",
          "private-abstract-method",
        ],
      },
    ],
    "@typescript-eslint/naming-convention": [
      "warn",
      { selector: "default", format: ["camelCase"] },

      { selector: "variableLike", format: ["camelCase"] },
      {
        selector: "variable",
        format: ["camelCase", "PascalCase", "UPPER_CASE"],
        leadingUnderscore: "allow",
      },
      {
        selector: "parameter",
        format: ["camelCase"],
        leadingUnderscore: "allow",
      },

      {
        selector: "memberLike",
        format: ["camelCase"],
        leadingUnderscore: "allow",
      },
      {
        selector: "memberLike",
        modifiers: ["private"],
        format: ["camelCase"],
        leadingUnderscore: "require",
      },

      { selector: "typeLike", format: ["PascalCase"] },
      { selector: "typeParameter", format: ["PascalCase"], prefix: ["T"] },

      {
        selector: "interface",
        format: ["PascalCase"],
        custom: { regex: "^I[A-Z]", match: true },
      },
      { selector: "enum", format: ["UPPER_CASE"] },
      { selector: "enumMember", format: ["UPPER_CASE", "PascalCase"] },
      {
        selector: "property",
        format: ["camelCase", "PascalCase", "snake_case", "UPPER_CASE"],
        leadingUnderscore: "allow",
      },
    ],
  },
};
